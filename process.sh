#! /bin/bash
set -eou pipefail

function section() {
    echo '';
    echo $1;
    echo '---------------------------------------------------------';
}

TAG=${1}

if [[ ! -d workspace ]]; then
    git clone https://github.com/Kareadita/Kavita.git workspace;
fi

cd workspace;

section 'Resetting';

git reset --hard;
git clean -fdx;

section 'Pulling code';

git fetch;
git checkout $TAG;

section 'Adding npgsql package';

pushd API;
dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 6.0.5;
popd;

section 'Applying patches';

for p in ../patches/*.patch; do
    echo "Applying ${p}"
    git apply "${p}";
done;


echo -e '/* AUTOGENERATED BY process.sh */\n\nnamespace PgKavita.DataMigrationTool {\n    static class Migrations {\n        public static readonly string[] ExpectedMigrations = new string[]{' > ../DataMigrationTool/Migrations.cs;
grep -h '\[Migration("' API/Data/Migrations/*.Designer.cs | sed 's/\[Migration(/        /' | sed 's/)\]/,/' >> ../DataMigrationTool/Migrations.cs;
echo -e '        };\n    }\n}' >> ../DataMigrationTool/Migrations.cs


section 'Recreating and squashing migrations';

if [[ -f ../state/previousTag ]] && [[ "$(cat ../state/previousTag)" != "${TAG}" ]]; then
    rm -rf ../changedMigrations/*;
    for f in $(git diff --name-only "$(cat ../state/previousTag)" ${TAG} 'API/Data/Migrations/[[:digit:]]*'); do
        cp "$f" ../changedMigrations;
    done;
fi
rm -rf API/Data/Migrations/*;
cp -r ../state/migrations/* API/Data/Migrations/;
dotnet ef migrations add "${TAG//./Dot}" --project API --output-dir Data/Migrations;
cp -r API/Data/Migrations/* ../state/migrations/;

echo ${TAG} > ../state/previousTag;

section 'Done.';

echo 'Please check the changedMigrations directory for any renames/scripts and change the newly created migration accordingly.';
echo "Once this is done, you can safely run ./build.sh ${TAG}";